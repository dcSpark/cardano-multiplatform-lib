"use strict";(self.webpackChunkcddl_codegen_documentation=self.webpackChunkcddl_codegen_documentation||[]).push([[932],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>f});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=n.createContext({}),d=function(e){var a=n.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},p=function(e){var a=d(e.components);return n.createElement(o.Provider,{value:a},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=d(t),u=r,f=m["".concat(o,".").concat(u)]||m[u]||c[u]||i;return t?n.createElement(f,s(s({ref:a},p),{},{components:t})):n.createElement(f,s({ref:a},p))}));function f(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=u;var l={};for(var o in a)hasOwnProperty.call(a,o)&&(l[o]=a[o]);l.originalType=e,l[m]="string"==typeof e?e:r,s[1]=l;for(var d=2;d<i;d++)s[d]=t[d];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6787:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var n=t(7462),r=(t(7294),t(3905));const i={sidebar_position:5},s="CIP25",l={unversionedId:"modules/CIP25",id:"modules/CIP25",title:"CIP25",description:"Context",source:"@site/docs/modules/CIP25.mdx",sourceDirName:"modules",slug:"/modules/CIP25",permalink:"/modules/CIP25",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"TransactionBuilder",permalink:"/modules/builders/generating_transactions"},next:{title:"CIP36",permalink:"/modules/cip36"}},o={},d=[{value:"Context",id:"context",level:2},{value:"Code Definitions",id:"code-definitions",level:2},{value:"Examples",id:"examples",level:2},{value:"Create",id:"create",level:3},{value:"Parse CIP25Metadata",id:"parse-cip25metadata",level:3},{value:"Parse Metadata Details",id:"parse-metadata-details",level:3},{value:"Loose Parse Metadata details",id:"loose-parse-metadata-details",level:3},{value:"Just name",id:"just-name",level:4},{value:"Upercase name",id:"upercase-name",level:4},{value:"id no name",id:"id-no-name",level:4},{value:"Image",id:"image",level:4}],p={toc:d},m="wrapper";function c(e){let{components:a,...t}=e;return(0,r.kt)(m,(0,n.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"cip25"},"CIP25"),(0,r.kt)("h2",{id:"context"},"Context"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://cips.cardano.org/cips/cip25/"},"CIP25")," defines an NFT Metadata Standard for Native Tokens."),(0,r.kt)("p",null,"Since tokens on Cardano are a part of the UTxO ledger, the metadata isn't directly attached to a token, but instead stored in the transaction data."),(0,r.kt)("p",null,"When data is transmitted or stored in Cardano, it is often encoded as CBOR bytes to optimize space and facilitate fast processing. CBOR provides a standardized way to encode complex data structures, making it easier for different components of the Cardano ecosystem to interact and interpret the data."),(0,r.kt)("p",null,"Below is the entire metadata schema for CIP-25, which can be parsed by passing in the CBOR bytes of the entire transaction metadata\nor by passing in an existing Metadata struct."),(0,r.kt)("p",null,"Parsing from CBOR bytes should be marginally faster."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n      "721": {\n        "<policy_id>": {\n          "<asset_name>": {\n            "name": <string>,\n    \n            "image": <uri | array>,\n            "mediaType": image/<mime_sub_type>,\n    \n            "description": <string | array>,\n    \n            "files": [{\n              "name": <string>,\n              "mediaType": <mime_type>,\n              "src": <uri | array>,\n              <other_properties>\n            }],\n    \n            <other properties>\n          }\n        },\n        "version": <version_id>\n      }\n    }\n')),(0,r.kt)("h2",{id:"code-definitions"},"Code Definitions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"CIP25Metadata")," struct is the top-level struct for CIP-25 metadata, and contains a ",(0,r.kt)("inlineCode",{parentName:"p"},"key_721")," field of type ",(0,r.kt)("inlineCode",{parentName:"p"},"LabelMetadata"),". The key_721 field will contain either a LabelMetadataV1 or LabelMetadataV2 instance.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"LabelMetadata")," defines an enum type that can contain either a ",(0,r.kt)("inlineCode",{parentName:"p"},"LabelMetadataV1")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"LabelMetadataV2")," instance. It also provides functions for creating instances of each type.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"MetadataDetails")," defines a struct that represents metadata details for a specific asset. It contains fields for the asset name, an image associated with the asset, a media type, a description, and details about any associated files. The ",(0,r.kt)("inlineCode",{parentName:"p"},"new()")," method creates a new instance with the specified name and image, and sets the other fields to None."))),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"create"},"Create"),(0,r.kt)("p",null,"The following example shows how to create and populate the CIP25 metadata schema with the available structs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'    let mut details = MetadataDetails::new(\n        String64::try_from("Metadata Name").unwrap(),\n        ChunkableString::from("htts://some.website.com/image.png"),\n    );    \n    details.description = Some(ChunkableString::from("description of this NFT"));\n    details.media_type = Some(String64::try_from("image/*").unwrap());\n    details.files = Some(vec![\n        FilesDetails::new(\n            String64::new_str("filename1").unwrap(),\n            String64::new_str("filetype1").unwrap(),\n            ChunkableString::from("src1"),\n        ),\n        FilesDetails::new(\n            String64::new_str("filename2").unwrap(),\n            String64::new_str("filetype2").unwrap(),\n            ChunkableString::from("src2"),\n        ),\n    ]);\n    let mut v2 = Data::new();\n    let mut v2_inner = BTreeMap::new();\n    v2_inner.insert(AssetNameV2::from(vec![0xCA, 0xFE, 0xD0, 0x0D]), details);\n    v2.insert(PolicyIdV2::from(vec![0xBA, 0xAD, 0xF0, 0x0D]), v2_inner);\n\n    let metadata = CIP25Metadata::new(LabelMetadata::new_label_metadata_v2(\n        LabelMetadataV2::new(v2),\n\n    ));\n    println!("{metadata:?}");\n\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"output:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'CIP25Metadata {\n    key_721: LabelMetadataV2(LabelMetadataV2 { \n        data: {\n            PolicyIdV2([186, 173, 240, 13]): {\n                AssetNameV2([202, 254, 208, 13]): MetadataDetails { \n                    name: String64("Metadata Name"), \n                    image: Single(String64("htts://some.website.com/image.png")), \n                    media_type: Some(String64("image/*")), \n                    description: Some(Single(String64("description of this NFT"))), \n                    files: Some([\n                        FilesDetails { \n                            name: String64("filename1"), \n                            media_type: String64("filetype1"), \n                            src: Single(String64("src1")) \n                            }, \n                        FilesDetails { \n                            name: String64("filename2"), \n                            media_type: String64("filetype2"), \n                            src: Single(String64("src2")) \n                            }\n                    ]) \n                }\n            }\n        } \n    }) \n}\n')),(0,r.kt)("h3",{id:"parse-cip25metadata"},"Parse CIP25Metadata"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let bytes = "bf1902d1a36464617461a244baadf00da344cafed00da6646e616d656d4d65746164617461204e616d656566696c657382a4637372636473726331646e616d656966696c656e616d6531696d65646961547970656966696c657479706531816864736b6a66616b7381a1403864a3637372636473726332646e616d656966696c656e616d6532696d65646961547970656966696c65747970653265696d6167657821687474733a2f2f736f6d652e776562736974652e636f6d2f696d6167652e706e67696d656469615479706567696d6167652f2a6b6465736372697074696f6e776465736372697074696f6e206f662074686973204e4654a14038641832a1403864a140386481a1403864816864736b6a66616b73a1403864a14038646776657273696f6e02a1403864a14038641905398144baadf00dff";\nlet data = CIP25Metadata::from_bytes(hex::decode(bytes).unwrap()).unwrap();\nprintln!("{data:?}");\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"output:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'CIP25Metadata { \n    key_721: LabelMetadataV2(\n        LabelMetadataV2 { \n            data: {\n                PolicyIdV2([186, 173, 240, 13]): {\n                    AssetNameV2([202, 254, 208, 13]): MetadataDetails { \n                        name: String64("Metadata Name"), \n                        image: Single(String64("htts://some.website.com/image.png")), \n                        media_type: Some(String64("image/*")), \n                        description: Some(Single(String64("description of this NFT"))), \n                        files: Some([\n                            FilesDetails { \n                                name: String64("filename1"), \n                                media_type: String64("filetype1"), \n                                src: Single(String64("src1")) \n                                }, \n                            FilesDetails { \n                                name: String64("filename2"), \n                                media_type: String64("filetype2"), \n                                src: Single(String64("src2")) \n                                }\n                        ]) \n                    }\n                }\n            } \n        }) \n    }\n\n')),(0,r.kt)("h3",{id:"parse-metadata-details"},"Parse Metadata Details"),(0,r.kt)("p",null,"Fields can be extracted from the ",(0,r.kt)("inlineCode",{parentName:"p"},"MetadataDetails")," struct."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'// {\n//  "arweaveId": "6srpXZOTfK_62KUrJKh4VdCFG0YS271pq20OMRpE5Ts",\n//  "image": "ipfs://QmUWP6xGHucgBUv514gwgbt4yijg36aUQunEP61z5D8RKS",\n//  "name": "SpaceBud #1507",\n//  "traits": ["Star Suit", "Chestplate", "Belt", "Flag", "Pistol"],\n//  "type": "Alien",\n// }\n\nlet bytes = "a569617277656176654964782b36737270585a4f54664b5f36324b55724a4b68345664434647305953323731707132304f4d52704535547365696d6167657835697066733a2f2f516d5557503678474875636742557635313467776762743479696a673336615551756e455036317a354438524b53646e616d656e53706163654275642023313530376674726169747385695374617220537569746a4368657374706c6174656442656c7464466c616766506973746f6c647479706565416c69656e";\n\nlet output = MetadataDetails::from_bytes(hex::decode(bytes).unwrap()).unwrap();\nprintln!("{output:?}")    \n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"output:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'MetadataDetails { \n    name: String64("SpaceBud #1507"), \n    image: Single(String64("ipfs://QmUWP6xGHucgBUv514gwgbt4yijg36aUQunEP61z5D8RKS")), \n    media_type: None, \n    description: None, \n    files: None\n}\n')),(0,r.kt)("h3",{id:"loose-parse-metadata-details"},"Loose Parse Metadata details"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"loose_parse()")," function allows parsing of certain data that is technically non-compliant with CIP25 due to minor mistakes by their creators. "),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This function should only to be used to parse non conformant metadata, since it will return a different struct (MiniMetadataDetails) which will just (possibly)return the name/image. "),(0,r.kt)("p",{parentName:"admonition"},"It's best to only use it as a fallback when the regular parsing fails.")),(0,r.kt)("h4",{id:"just-name"},"Just name"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'// {"name":"Metaverse"}\nlet details = MiniMetadataDetails::loose_parse(&TransactionMetadatum::from_bytes(hex::decode("a1646e616d65694d6574617665727365").unwrap()).unwrap()).unwrap();\nprintln!("{details:?}")\n')),(0,r.kt)("p",null,"ouput:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'MiniMetadataDetails { \n    name: Some(String64("Metaverse")), \n    image: None \n}\n')),(0,r.kt)("h4",{id:"upercase-name"},"Upercase name"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'// {\n//    "Date":"9 May 2021",\n//    "Description":"Happy Mother\'s Day to all the Cardano Moms!",\n//    "Image":"ipfs.io/ipfs/Qmah6QPKUKvp6K9XQB2SA42Q3yrffCbYBbk8EoRrB7FN2g",\n//    "Name":"Mother\'s Day 2021",\n//    "Ticker":"MOM21",\n//    "URL":"ipfs.io/ipfs/Qmah6QPKUKvp6K9XQB2SA42Q3yrffCbYBbk8EoRrB7FN2g"\n// }\nlet details = MiniMetadataDetails::loose_parse(&TransactionMetadatum::from_bytes(hex::decode("a664446174656a39204d617920323032316b4465736372697074696f6e782b4861707079204d6f7468657227732044617920746f20616c6c207468652043617264616e6f204d6f6d732165496d616765783b697066732e696f2f697066732f516d61683651504b554b7670364b39585142325341343251337972666643625942626b38456f52724237464e3267644e616d65714d6f746865722773204461792032303231665469636b6572654d4f4d32316355524c783b697066732e696f2f697066732f516d61683651504b554b7670364b39585142325341343251337972666643625942626b38456f52724237464e3267").unwrap()).unwrap()).unwrap();\nlet name = details.name.unwrap().0;\nprintln!("{name:?}")\n')),(0,r.kt)("p",null,"output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"Mother\'s Day 2021"\n')),(0,r.kt)("h4",{id:"id-no-name"},"id no name"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'// {\n//   "id":"00",\n//   "image":"ipfs://QmSfYTF8B4ua6hFdr6URdRDZBZ9FjCQNUdDcLr2f7P8xn3"\n// }\nlet details = MiniMetadataDetails::loose_parse(&TransactionMetadatum::from_bytes(hex::decode("a262696462303065696d6167657835697066733a2f2f516d5366595446384234756136684664723655526452445a425a39466a43514e556444634c723266375038786e33").unwrap()).unwrap()).unwrap();\nlet name = details.name.unwrap().0;\nprintln!("{name:?}")\n')),(0,r.kt)("p",null,"output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"00"\n')),(0,r.kt)("h4",{id:"image"},"Image"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'// {\n//    "image":"ipfs://QmSfYTF8B4ua6hFdr6URdRDZBZ9FjCQNUdDcLr2f7P8xn3"\n// }\nlet details = MiniMetadataDetails::loose_parse(&TransactionMetadatum::from_bytes(hex::decode("a165696d6167657835697066733a2f2f516d5366595446384234756136684664723655526452445a425a39466a43514e556444634c723266375038786e33").unwrap()).unwrap()).unwrap();\nlet image = String::from(&details.image.unwrap());\nprintln!("{image:?}");\n')),(0,r.kt)("p",null,"output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"ipfs://QmSfYTF8B4ua6hFdr6URdRDZBZ9FjCQNUdDcLr2f7P8xn3"\n')))}c.isMDXComponent=!0}}]);