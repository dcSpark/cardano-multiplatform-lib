"use strict";(self.webpackChunkcddl_codegen_documentation=self.webpackChunkcddl_codegen_documentation||[]).push([[971],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1269:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_label:"Introduction",sidebar_position:1},o="Cardano Multiplatform Lib",l={unversionedId:"index",id:"index",title:"Cardano Multiplatform Lib",description:"This is a library, written in Rust, that can be deployed to multiple platforms (Rust crate, JS, Typescript, WASM, etc). It handles:",source:"@site/docs/index.md",sourceDirName:".",slug:"/",permalink:"/",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Introduction",sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Installation & Getting Started",permalink:"/getting_started"}},s={},c=[{value:"NPM packages",id:"npm-packages",level:5},{value:"Rust crates",id:"rust-crates",level:5},{value:"Mobile bindings",id:"mobile-bindings",level:5},{value:"Pre-requisite knowledge",id:"pre-requisite-knowledge",level:2},{value:"Benefits of using this library",id:"benefits-of-using-this-library",level:2},{value:"A note on code examples",id:"a-note-on-code-examples",level:2},{value:"Documentation",id:"documentation",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"cardano-multiplatform-lib"},"Cardano Multiplatform Lib"),(0,r.kt)("p",null,"This is a library, written in Rust, that can be deployed to multiple platforms (Rust crate, JS, Typescript, WASM, etc). It handles:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Serialization & deserialization of core data structures"),(0,r.kt)("li",{parentName:"ul"},"Builders to streamline and verify the construction of transactions and related components"),(0,r.kt)("li",{parentName:"ul"},"Useful utility functions for dApps & wallets")),(0,r.kt)("h5",{id:"npm-packages"},"NPM packages"),(0,r.kt)("p",null,"TODO: update these once we publish new versions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"browser: ",(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@dcspark/cardano-multiplatform-lib-browser"},"link")),(0,r.kt)("li",{parentName:"ul"},"nodejs: ",(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@dcspark/cardano-multiplatform-lib-nodejs"},"link")),(0,r.kt)("li",{parentName:"ul"},"asm.js (strongly discouraged): ",(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@dcspark/cardano-multiplatform-lib-asmjs"},"link"))),(0,r.kt)("p",null,"Note: If you are using WebPack, you must use version 5 or later for CML to work."),(0,r.kt)("h5",{id:"rust-crates"},"Rust crates"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"crates: ",(0,r.kt)("a",{parentName:"li",href:"https://crates.io/crates/cardano-multiplatform-lib"},"link"))),(0,r.kt)("h5",{id:"mobile-bindings"},"Mobile bindings"),(0,r.kt)("p",null,"We recommend using Ionic + Capacitor or an equivalent setup to have the WASM bindings working in mobile"),(0,r.kt)("h2",{id:"pre-requisite-knowledge"},"Pre-requisite knowledge"),(0,r.kt)("p",null,"This library assumes a certain amount of knowledge about how Cardano works (to avoid re-documenting the wheel)."),(0,r.kt)("p",null,"You can find the specifications of Cardano's ledger ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/input-output-hk/cardano-ledger-specs"},"here")," which we suggest consulting as you use this library. Notably, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Shelley ledger formal specification")," covers the core concepts. Make sure to check the specs for later eras as well when needed."),(0,r.kt)("h2",{id:"benefits-of-using-this-library"},"Benefits of using this library"),(0,r.kt)("p",null,"Serialization/deserialization code is automatically generated from\nCardano\u2019s official specification, which guarantees it can easily stay up\nto date! We do this using a tool managed by EMURGO & dcSpark called ",(0,r.kt)("inlineCode",{parentName:"p"},"cddl-codegen"),"\nwhich can be re-used for other tasks such as automatically generate a\nRust library for Cardano metadata specifications!"),(0,r.kt)("p",null,"The most important feature of this is that CML has been generated to allow all CBOR details to be preserved.\nWith CBOR many CBOR structures can have multiple ways to serialize to bytes from the same equivalent structure.\nThis causes issues especially when computing hashes and is a frequent problem with working across tools e.g. cardano-node-cli and cardano-serialization-lib encoding plutus datums differently. This makes CML much more compatible with all other libraries as it will remember all these specific CBOR encoding details. This is particularly important for use with dApps and wallets connecting to dApps."),(0,r.kt)("p",null,"It is also very easy to create scripts in Rust or WASM to share with\nstake pools, or even embed inside an online tool! No more crazy\ncardano-cli bash scripts!"),(0,r.kt)("p",null,"Powerful and flexible enough to be used to power wallets and exchanges!\n(Yes, it\u2019s used in production!)"),(0,r.kt)("h2",{id:"a-note-on-code-examples"},"A note on code examples"),(0,r.kt)("p",null,"All code examples are using the WASM (typescript/javascript) API. If you are using CML from rust you will need to change the code to rust syntax e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"Foo.bar()")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"Foo::new()")," etc. We've tried to keep the API as consistent as possible between the different bindings but some exceptions exist. The array/map wrappers (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"FooList")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"MapFooToBar"),") in WASM are simply ",(0,r.kt)("inlineCode",{parentName:"p"},"Vec<Foo>")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"OrderedHashMap<Foo, Bar>")," respectively. There will be some changes relating to reference params/moving/etc as well."),(0,r.kt)("p",null,"You can find complete examples in the ",(0,r.kt)("inlineCode",{parentName:"p"},"/examples/")," directory."),(0,r.kt)("h2",{id:"documentation"},"Documentation"),(0,r.kt)("p",null,"This library generates ",(0,r.kt)("inlineCode",{parentName:"p"},"Typescript")," type definitions, so it\u2019s often easiest to see what is possible by just looking at the types! These are found in the ",(0,r.kt)("inlineCode",{parentName:"p"},".ts")," file in the npm package roots.\nIf you are using rust the full API will be shown in the respective crates.io pages."))}d.isMDXComponent=!0}}]);