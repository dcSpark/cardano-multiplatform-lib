use cml_blockfrost::{parse_cost_models, BlockfrostParamsParseError};
use cml_chain::{
    builders::tx_builder::{TransactionBuilderConfigBuilder, TxBuilderConfigField},
    fees::LinearFee,
    plutus::ExUnitPrices,
    Coin, SubCoin,
};
use std::str::FromStr;
use wasm_bindgen::prelude::{wasm_bindgen, JsError};

fn parse_string_coin_param(
    params: &serde_json::Value,
    key: &str,
    field: TxBuilderConfigField,
) -> Result<Coin, BlockfrostParamsParseError> {
    params
        .get(key)
        .ok_or(BlockfrostParamsParseError::MissingField(field))
        .and_then(|v| {
            match v {
                serde_json::Value::String(c) => Coin::from_str(&c).ok(),
                _ => None,
            }
            .ok_or(BlockfrostParamsParseError::IncorrectFormat(field))
        })
}

fn parse_u64_param(
    params: &serde_json::Value,
    key: &str,
    field: TxBuilderConfigField,
) -> Result<u64, BlockfrostParamsParseError> {
    params
        .get(key)
        .ok_or(BlockfrostParamsParseError::MissingField(field))
        .and_then(|v| {
            v.as_u64()
                .ok_or(BlockfrostParamsParseError::IncorrectFormat(field))
        })
}

fn make_tx_builder_cfg_impl(
    params: serde_json::Value,
) -> Result<TransactionBuilderConfigBuilder, BlockfrostParamsParseError> {
    let coins_per_utxo_byte = parse_string_coin_param(
        &params,
        "coins_per_utxo_word",
        TxBuilderConfigField::CoinsPerUtxoBytes,
    )?;
    let pool_deposit =
        parse_string_coin_param(&params, "pool_deposit", TxBuilderConfigField::PoolDeposit)?;
    let key_deposit =
        parse_string_coin_param(&params, "key_deposit", TxBuilderConfigField::KeyDeposit)?;
    let max_value_size =
        parse_string_coin_param(&params, "max_val_size", TxBuilderConfigField::MaxValueSize)?
            as u32;
    let ex_unit_prices = match (params.get("price_mem"), params.get("price_step")) {
        (Some(price_mem), Some(price_step)) => match (price_mem.as_f64(), price_step.as_f64()) {
            (Some(price_mem), Some(price_step)) => Ok(ExUnitPrices::new(
                SubCoin::from_base10_f32(price_mem as f32),
                SubCoin::from_base10_f32(price_step as f32),
            )),
            _ => Err(BlockfrostParamsParseError::IncorrectFormat(
                TxBuilderConfigField::ExUnitPrices,
            )),
        },
        _ => Err(BlockfrostParamsParseError::MissingField(
            TxBuilderConfigField::ExUnitPrices,
        )),
    }?;
    let fee_algo = match (params.get("min_fee_a"), params.get("min_fee_b")) {
        (Some(min_fee_a), Some(min_fee_b)) => match (min_fee_a.as_u64(), min_fee_b.as_u64()) {
            (Some(min_fee_a), Some(min_fee_b)) => Ok(LinearFee::new(min_fee_a, min_fee_b)),
            _ => Err(BlockfrostParamsParseError::IncorrectFormat(
                TxBuilderConfigField::ExUnitPrices,
            )),
        },
        _ => Err(BlockfrostParamsParseError::MissingField(
            TxBuilderConfigField::ExUnitPrices,
        )),
    }?;
    let max_tx_size =
        parse_u64_param(&params, "max_tx_size", TxBuilderConfigField::MaxTxSize)? as u32;
    let collateral_percentage = parse_u64_param(
        &params,
        "collateral_percent",
        TxBuilderConfigField::CollateralPercentage,
    )? as u32;
    let max_collateral_inputs = parse_u64_param(
        &params,
        "max_collateral_inputs",
        TxBuilderConfigField::MaxCollateralInputs,
    )? as u32;
    let mut config_builder = TransactionBuilderConfigBuilder::new()
        .fee_algo(fee_algo)
        .coins_per_utxo_byte(coins_per_utxo_byte)
        .pool_deposit(pool_deposit)
        .key_deposit(key_deposit)
        .max_value_size(max_value_size)
        .max_tx_size(max_tx_size)
        .ex_unit_prices(ex_unit_prices)
        .collateral_percentage(collateral_percentage)
        .max_collateral_inputs(max_collateral_inputs);
    if let Some(cost_models_value) = params.get("cost_models") {
        if let serde_json::Value::Object(cost_models) = cost_models_value {
            let cost_models_hashmap = cost_models
                .into_iter()
                .map(|(k, v)| (k.clone(), v.clone()))
                .collect();
            config_builder = config_builder.cost_models(parse_cost_models(&cost_models_hashmap)?);
        } else {
            return Err(BlockfrostParamsParseError::IncorrectFormat(
                TxBuilderConfigField::CostModels,
            ));
        }
    }
    Ok(config_builder.into())
}

/**
 * Parses Blockfrost's `epochs/latest/parameters` response JSON to make a TransactionBuilderConfigBuilder
 *
 * This simplifies `TransactionBuilder` creation if using blockfrost for protocol parameters
 */
#[wasm_bindgen]
pub fn blockfrost_make_tx_builder_cfg(
    response_json: &str,
) -> Result<cml_chain_wasm::builders::tx_builder::TransactionBuilderConfigBuilder, JsError> {
    let params: serde_json::Value =
        serde_json::from_str(response_json).map_err(|e| JsError::new(&e.to_string()))?;
    make_tx_builder_cfg_impl(params)
        .map(Into::into)
        .map_err(Into::into)
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn tx_builder_config_from_json() {
        let response_json = "{
            \"epoch\": 225,
            \"min_fee_a\": 44,
            \"min_fee_b\": 155381,
            \"max_block_size\": 65536,
            \"max_tx_size\": 16384,
            \"max_block_header_size\": 1100,
            \"key_deposit\": \"2000000\",
            \"pool_deposit\": \"500000000\",
            \"e_max\": 18,
            \"n_opt\": 150,
            \"a0\": 0.3,
            \"rho\": 0.003,
            \"tau\": 0.2,
            \"decentralisation_param\": 0.5,
            \"extra_entropy\": null,
            \"protocol_major_ver\": 2,
            \"protocol_minor_ver\": 0,
            \"min_utxo\": \"1000000\",
            \"min_pool_cost\": \"340000000\",
            \"nonce\": \"1a3be38bcbb7911969283716ad7aa550250226b76a61fc51cc9a9a35d9276d81\",
            \"cost_models\": {
                \"PlutusV2\": {
                    \"addInteger-cpu-arguments-intercept\": 205665,
                    \"addInteger-cpu-arguments-slope\": 812,
                    \"addInteger-memory-arguments-intercept\": 1,
                    \"addInteger-memory-arguments-slope\": 1,
                    \"appendByteString-cpu-arguments-intercept\": 1000,
                    \"appendByteString-cpu-arguments-slope\": 571,
                    \"appendByteString-memory-arguments-intercept\": 0,
                    \"appendByteString-memory-arguments-slope\": 1,
                    \"appendString-cpu-arguments-intercept\": 1000,
                    \"appendString-cpu-arguments-slope\": 24177,
                    \"appendString-memory-arguments-intercept\": 4,
                    \"appendString-memory-arguments-slope\": 1,
                    \"bData-cpu-arguments\": 1000,
                    \"bData-memory-arguments\": 32,
                    \"blake2b_256-cpu-arguments-intercept\": 117366,
                    \"blake2b_256-cpu-arguments-slope\": 10475,
                    \"blake2b_256-memory-arguments\": 4,
                    \"cekApplyCost-exBudgetCPU\": 23000,
                    \"cekApplyCost-exBudgetMemory\": 100,
                    \"cekBuiltinCost-exBudgetCPU\": 23000,
                    \"cekBuiltinCost-exBudgetMemory\": 100,
                    \"cekConstCost-exBudgetCPU\": 23000,
                    \"cekConstCost-exBudgetMemory\": 100,
                    \"cekDelayCost-exBudgetCPU\": 23000,
                    \"cekDelayCost-exBudgetMemory\": 100,
                    \"cekForceCost-exBudgetCPU\": 23000,
                    \"cekForceCost-exBudgetMemory\": 100,
                    \"cekLamCost-exBudgetCPU\": 23000,
                    \"cekLamCost-exBudgetMemory\": 100,
                    \"cekStartupCost-exBudgetCPU\": 100,
                    \"cekStartupCost-exBudgetMemory\": 100,
                    \"cekVarCost-exBudgetCPU\": 23000,
                    \"cekVarCost-exBudgetMemory\": 100,
                    \"chooseData-cpu-arguments\": 19537,
                    \"chooseData-memory-arguments\": 32,
                    \"chooseList-cpu-arguments\": 175354,
                    \"chooseList-memory-arguments\": 32,
                    \"chooseUnit-cpu-arguments\": 46417,
                    \"chooseUnit-memory-arguments\": 4,
                    \"consByteString-cpu-arguments-intercept\": 221973,
                    \"consByteString-cpu-arguments-slope\": 511,
                    \"consByteString-memory-arguments-intercept\": 0,
                    \"consByteString-memory-arguments-slope\": 1,
                    \"constrData-cpu-arguments\": 89141,
                    \"constrData-memory-arguments\": 32,
                    \"decodeUtf8-cpu-arguments-intercept\": 497525,
                    \"decodeUtf8-cpu-arguments-slope\": 14068,
                    \"decodeUtf8-memory-arguments-intercept\": 4,
                    \"decodeUtf8-memory-arguments-slope\": 2,
                    \"divideInteger-cpu-arguments-constant\": 196500,
                    \"divideInteger-cpu-arguments-model-arguments-intercept\": 453240,
                    \"divideInteger-cpu-arguments-model-arguments-slope\": 220,
                    \"divideInteger-memory-arguments-intercept\": 0,
                    \"divideInteger-memory-arguments-minimum\": 1,
                    \"divideInteger-memory-arguments-slope\": 1,
                    \"encodeUtf8-cpu-arguments-intercept\": 1000,
                    \"encodeUtf8-cpu-arguments-slope\": 28662,
                    \"encodeUtf8-memory-arguments-intercept\": 4,
                    \"encodeUtf8-memory-arguments-slope\": 2,
                    \"equalsByteString-cpu-arguments-constant\": 245000,
                    \"equalsByteString-cpu-arguments-intercept\": 216773,
                    \"equalsByteString-cpu-arguments-slope\": 62,
                    \"equalsByteString-memory-arguments\": 1,
                    \"equalsData-cpu-arguments-intercept\": 1060367,
                    \"equalsData-cpu-arguments-slope\": 12586,
                    \"equalsData-memory-arguments\": 1,
                    \"equalsInteger-cpu-arguments-intercept\": 208512,
                    \"equalsInteger-cpu-arguments-slope\": 421,
                    \"equalsInteger-memory-arguments\": 1,
                    \"equalsString-cpu-arguments-constant\": 187000,
                    \"equalsString-cpu-arguments-intercept\": 1000,
                    \"equalsString-cpu-arguments-slope\": 52998,
                    \"equalsString-memory-arguments\": 1,
                    \"fstPair-cpu-arguments\": 80436,
                    \"fstPair-memory-arguments\": 32,
                    \"headList-cpu-arguments\": 43249,
                    \"headList-memory-arguments\": 32,
                    \"iData-cpu-arguments\": 1000,
                    \"iData-memory-arguments\": 32,
                    \"ifThenElse-cpu-arguments\": 80556,
                    \"ifThenElse-memory-arguments\": 1,
                    \"indexByteString-cpu-arguments\": 57667,
                    \"indexByteString-memory-arguments\": 4,
                    \"lengthOfByteString-cpu-arguments\": 1000,
                    \"lengthOfByteString-memory-arguments\": 10,
                    \"lessThanByteString-cpu-arguments-intercept\": 197145,
                    \"lessThanByteString-cpu-arguments-slope\": 156,
                    \"lessThanByteString-memory-arguments\": 1,
                    \"lessThanEqualsByteString-cpu-arguments-intercept\": 197145,
                    \"lessThanEqualsByteString-cpu-arguments-slope\": 156,
                    \"lessThanEqualsByteString-memory-arguments\": 1,
                    \"lessThanEqualsInteger-cpu-arguments-intercept\": 204924,
                    \"lessThanEqualsInteger-cpu-arguments-slope\": 473,
                    \"lessThanEqualsInteger-memory-arguments\": 1,
                    \"lessThanInteger-cpu-arguments-intercept\": 208896,
                    \"lessThanInteger-cpu-arguments-slope\": 511,
                    \"lessThanInteger-memory-arguments\": 1,
                    \"listData-cpu-arguments\": 52467,
                    \"listData-memory-arguments\": 32,
                    \"mapData-cpu-arguments\": 64832,
                    \"mapData-memory-arguments\": 32,
                    \"mkCons-cpu-arguments\": 65493,
                    \"mkCons-memory-arguments\": 32,
                    \"mkNilData-cpu-arguments\": 22558,
                    \"mkNilData-memory-arguments\": 32,
                    \"mkNilPairData-cpu-arguments\": 16563,
                    \"mkNilPairData-memory-arguments\": 32,
                    \"mkPairData-cpu-arguments\": 76511,
                    \"mkPairData-memory-arguments\": 32,
                    \"modInteger-cpu-arguments-constant\": 196500,
                    \"modInteger-cpu-arguments-model-arguments-intercept\": 453240,
                    \"modInteger-cpu-arguments-model-arguments-slope\": 220,
                    \"modInteger-memory-arguments-intercept\": 0,
                    \"modInteger-memory-arguments-minimum\": 1,
                    \"modInteger-memory-arguments-slope\": 1,
                    \"multiplyInteger-cpu-arguments-intercept\": 69522,
                    \"multiplyInteger-cpu-arguments-slope\": 11687,
                    \"multiplyInteger-memory-arguments-intercept\": 0,
                    \"multiplyInteger-memory-arguments-slope\": 1,
                    \"nullList-cpu-arguments\": 60091,
                    \"nullList-memory-arguments\": 32,
                    \"quotientInteger-cpu-arguments-constant\": 196500,
                    \"quotientInteger-cpu-arguments-model-arguments-intercept\": 453240,
                    \"quotientInteger-cpu-arguments-model-arguments-slope\": 220,
                    \"quotientInteger-memory-arguments-intercept\": 0,
                    \"quotientInteger-memory-arguments-minimum\": 1,
                    \"quotientInteger-memory-arguments-slope\": 1,
                    \"remainderInteger-cpu-arguments-constant\": 196500,
                    \"remainderInteger-cpu-arguments-model-arguments-intercept\": 453240,
                    \"remainderInteger-cpu-arguments-model-arguments-slope\": 220,
                    \"remainderInteger-memory-arguments-intercept\": 0,
                    \"remainderInteger-memory-arguments-minimum\": 1,
                    \"remainderInteger-memory-arguments-slope\": 1,
                    \"serialiseData-cpu-arguments-intercept\": 1159724,
                    \"serialiseData-cpu-arguments-slope\": 392670,
                    \"serialiseData-memory-arguments-intercept\": 0,
                    \"serialiseData-memory-arguments-slope\": 2,
                    \"sha2_256-cpu-arguments-intercept\": 806990,
                    \"sha2_256-cpu-arguments-slope\": 30482,
                    \"sha2_256-memory-arguments\": 4,
                    \"sha3_256-cpu-arguments-intercept\": 1927926,
                    \"sha3_256-cpu-arguments-slope\": 82523,
                    \"sha3_256-memory-arguments\": 4,
                    \"sliceByteString-cpu-arguments-intercept\": 265318,
                    \"sliceByteString-cpu-arguments-slope\": 0,
                    \"sliceByteString-memory-arguments-intercept\": 4,
                    \"sliceByteString-memory-arguments-slope\": 0,
                    \"sndPair-cpu-arguments\": 85931,
                    \"sndPair-memory-arguments\": 32,
                    \"subtractInteger-cpu-arguments-intercept\": 205665,
                    \"subtractInteger-cpu-arguments-slope\": 812,
                    \"subtractInteger-memory-arguments-intercept\": 1,
                    \"subtractInteger-memory-arguments-slope\": 1,
                    \"tailList-cpu-arguments\": 41182,
                    \"tailList-memory-arguments\": 32,
                    \"trace-cpu-arguments\": 212342,
                    \"trace-memory-arguments\": 32,
                    \"unBData-cpu-arguments\": 31220,
                    \"unBData-memory-arguments\": 32,
                    \"unConstrData-cpu-arguments\": 32696,
                    \"unConstrData-memory-arguments\": 32,
                    \"unIData-cpu-arguments\": 43357,
                    \"unIData-memory-arguments\": 32,
                    \"unListData-cpu-arguments\": 32247,
                    \"unListData-memory-arguments\": 32,
                    \"unMapData-cpu-arguments\": 38314,
                    \"unMapData-memory-arguments\": 32,
                    \"verifyEcdsaSecp256k1Signature-cpu-arguments\": 35892428,
                    \"verifyEcdsaSecp256k1Signature-memory-arguments\": 10,
                    \"verifyEd25519Signature-cpu-arguments-intercept\": 57996947,
                    \"verifyEd25519Signature-cpu-arguments-slope\": 18975,
                    \"verifyEd25519Signature-memory-arguments\": 10,
                    \"verifySchnorrSecp256k1Signature-cpu-arguments-intercept\": 38887044,
                    \"verifySchnorrSecp256k1Signature-cpu-arguments-slope\": 32947,
                    \"verifySchnorrSecp256k1Signature-memory-arguments\": 10
                },
                \"PlutusV1\": {
                    \"addInteger-cpu-arguments-intercept\": 205665,
                    \"addInteger-cpu-arguments-slope\": 812,
                    \"addInteger-memory-arguments-intercept\": 1,
                    \"addInteger-memory-arguments-slope\": 1,
                    \"appendByteString-cpu-arguments-intercept\": 1000,
                    \"appendByteString-cpu-arguments-slope\": 571,
                    \"appendByteString-memory-arguments-intercept\": 0,
                    \"appendByteString-memory-arguments-slope\": 1,
                    \"appendString-cpu-arguments-intercept\": 1000,
                    \"appendString-cpu-arguments-slope\": 24177,
                    \"appendString-memory-arguments-intercept\": 4,
                    \"appendString-memory-arguments-slope\": 1,
                    \"bData-cpu-arguments\": 1000,
                    \"bData-memory-arguments\": 32,
                    \"blake2b_256-cpu-arguments-intercept\": 117366,
                    \"blake2b_256-cpu-arguments-slope\": 10475,
                    \"blake2b_256-memory-arguments\": 4,
                    \"cekApplyCost-exBudgetCPU\": 23000,
                    \"cekApplyCost-exBudgetMemory\": 100,
                    \"cekBuiltinCost-exBudgetCPU\": 23000,
                    \"cekBuiltinCost-exBudgetMemory\": 100,
                    \"cekConstCost-exBudgetCPU\": 23000,
                    \"cekConstCost-exBudgetMemory\": 100,
                    \"cekDelayCost-exBudgetCPU\": 23000,
                    \"cekDelayCost-exBudgetMemory\": 100,
                    \"cekForceCost-exBudgetCPU\": 23000,
                    \"cekForceCost-exBudgetMemory\": 100,
                    \"cekLamCost-exBudgetCPU\": 23000,
                    \"cekLamCost-exBudgetMemory\": 100,
                    \"cekStartupCost-exBudgetCPU\": 100,
                    \"cekStartupCost-exBudgetMemory\": 100,
                    \"cekVarCost-exBudgetCPU\": 23000,
                    \"cekVarCost-exBudgetMemory\": 100,
                    \"chooseData-cpu-arguments\": 19537,
                    \"chooseData-memory-arguments\": 32,
                    \"chooseList-cpu-arguments\": 175354,
                    \"chooseList-memory-arguments\": 32,
                    \"chooseUnit-cpu-arguments\": 46417,
                    \"chooseUnit-memory-arguments\": 4,
                    \"consByteString-cpu-arguments-intercept\": 221973,
                    \"consByteString-cpu-arguments-slope\": 511,
                    \"consByteString-memory-arguments-intercept\": 0,
                    \"consByteString-memory-arguments-slope\": 1,
                    \"constrData-cpu-arguments\": 89141,
                    \"constrData-memory-arguments\": 32,
                    \"decodeUtf8-cpu-arguments-intercept\": 497525,
                    \"decodeUtf8-cpu-arguments-slope\": 14068,
                    \"decodeUtf8-memory-arguments-intercept\": 4,
                    \"decodeUtf8-memory-arguments-slope\": 2,
                    \"divideInteger-cpu-arguments-constant\": 196500,
                    \"divideInteger-cpu-arguments-model-arguments-intercept\": 453240,
                    \"divideInteger-cpu-arguments-model-arguments-slope\": 220,
                    \"divideInteger-memory-arguments-intercept\": 0,
                    \"divideInteger-memory-arguments-minimum\": 1,
                    \"divideInteger-memory-arguments-slope\": 1,
                    \"encodeUtf8-cpu-arguments-intercept\": 1000,
                    \"encodeUtf8-cpu-arguments-slope\": 28662,
                    \"encodeUtf8-memory-arguments-intercept\": 4,
                    \"encodeUtf8-memory-arguments-slope\": 2,
                    \"equalsByteString-cpu-arguments-constant\": 245000,
                    \"equalsByteString-cpu-arguments-intercept\": 216773,
                    \"equalsByteString-cpu-arguments-slope\": 62,
                    \"equalsByteString-memory-arguments\": 1,
                    \"equalsData-cpu-arguments-intercept\": 1060367,
                    \"equalsData-cpu-arguments-slope\": 12586,
                    \"equalsData-memory-arguments\": 1,
                    \"equalsInteger-cpu-arguments-intercept\": 208512,
                    \"equalsInteger-cpu-arguments-slope\": 421,
                    \"equalsInteger-memory-arguments\": 1,
                    \"equalsString-cpu-arguments-constant\": 187000,
                    \"equalsString-cpu-arguments-intercept\": 1000,
                    \"equalsString-cpu-arguments-slope\": 52998,
                    \"equalsString-memory-arguments\": 1,
                    \"fstPair-cpu-arguments\": 80436,
                    \"fstPair-memory-arguments\": 32,
                    \"headList-cpu-arguments\": 43249,
                    \"headList-memory-arguments\": 32,
                    \"iData-cpu-arguments\": 1000,
                    \"iData-memory-arguments\": 32,
                    \"ifThenElse-cpu-arguments\": 80556,
                    \"ifThenElse-memory-arguments\": 1,
                    \"indexByteString-cpu-arguments\": 57667,
                    \"indexByteString-memory-arguments\": 4,
                    \"lengthOfByteString-cpu-arguments\": 1000,
                    \"lengthOfByteString-memory-arguments\": 10,
                    \"lessThanByteString-cpu-arguments-intercept\": 197145,
                    \"lessThanByteString-cpu-arguments-slope\": 156,
                    \"lessThanByteString-memory-arguments\": 1,
                    \"lessThanEqualsByteString-cpu-arguments-intercept\": 197145,
                    \"lessThanEqualsByteString-cpu-arguments-slope\": 156,
                    \"lessThanEqualsByteString-memory-arguments\": 1,
                    \"lessThanEqualsInteger-cpu-arguments-intercept\": 204924,
                    \"lessThanEqualsInteger-cpu-arguments-slope\": 473,
                    \"lessThanEqualsInteger-memory-arguments\": 1,
                    \"lessThanInteger-cpu-arguments-intercept\": 208896,
                    \"lessThanInteger-cpu-arguments-slope\": 511,
                    \"lessThanInteger-memory-arguments\": 1,
                    \"listData-cpu-arguments\": 52467,
                    \"listData-memory-arguments\": 32,
                    \"mapData-cpu-arguments\": 64832,
                    \"mapData-memory-arguments\": 32,
                    \"mkCons-cpu-arguments\": 65493,
                    \"mkCons-memory-arguments\": 32,
                    \"mkNilData-cpu-arguments\": 22558,
                    \"mkNilData-memory-arguments\": 32,
                    \"mkNilPairData-cpu-arguments\": 16563,
                    \"mkNilPairData-memory-arguments\": 32,
                    \"mkPairData-cpu-arguments\": 76511,
                    \"mkPairData-memory-arguments\": 32,
                    \"modInteger-cpu-arguments-constant\": 196500,
                    \"modInteger-cpu-arguments-model-arguments-intercept\": 453240,
                    \"modInteger-cpu-arguments-model-arguments-slope\": 220,
                    \"modInteger-memory-arguments-intercept\": 0,
                    \"modInteger-memory-arguments-minimum\": 1,
                    \"modInteger-memory-arguments-slope\": 1,
                    \"multiplyInteger-cpu-arguments-intercept\": 69522,
                    \"multiplyInteger-cpu-arguments-slope\": 11687,
                    \"multiplyInteger-memory-arguments-intercept\": 0,
                    \"multiplyInteger-memory-arguments-slope\": 1,
                    \"nullList-cpu-arguments\": 60091,
                    \"nullList-memory-arguments\": 32,
                    \"quotientInteger-cpu-arguments-constant\": 196500,
                    \"quotientInteger-cpu-arguments-model-arguments-intercept\": 453240,
                    \"quotientInteger-cpu-arguments-model-arguments-slope\": 220,
                    \"quotientInteger-memory-arguments-intercept\": 0,
                    \"quotientInteger-memory-arguments-minimum\": 1,
                    \"quotientInteger-memory-arguments-slope\": 1,
                    \"remainderInteger-cpu-arguments-constant\": 196500,
                    \"remainderInteger-cpu-arguments-model-arguments-intercept\": 453240,
                    \"remainderInteger-cpu-arguments-model-arguments-slope\": 220,
                    \"remainderInteger-memory-arguments-intercept\": 0,
                    \"remainderInteger-memory-arguments-minimum\": 1,
                    \"remainderInteger-memory-arguments-slope\": 1,
                    \"sha2_256-cpu-arguments-intercept\": 806990,
                    \"sha2_256-cpu-arguments-slope\": 30482,
                    \"sha2_256-memory-arguments\": 4,
                    \"sha3_256-cpu-arguments-intercept\": 1927926,
                    \"sha3_256-cpu-arguments-slope\": 82523,
                    \"sha3_256-memory-arguments\": 4,
                    \"sliceByteString-cpu-arguments-intercept\": 265318,
                    \"sliceByteString-cpu-arguments-slope\": 0,
                    \"sliceByteString-memory-arguments-intercept\": 4,
                    \"sliceByteString-memory-arguments-slope\": 0,
                    \"sndPair-cpu-arguments\": 85931,
                    \"sndPair-memory-arguments\": 32,
                    \"subtractInteger-cpu-arguments-intercept\": 205665,
                    \"subtractInteger-cpu-arguments-slope\": 812,
                    \"subtractInteger-memory-arguments-intercept\": 1,
                    \"subtractInteger-memory-arguments-slope\": 1,
                    \"tailList-cpu-arguments\": 41182,
                    \"tailList-memory-arguments\": 32,
                    \"trace-cpu-arguments\": 212342,
                    \"trace-memory-arguments\": 32,
                    \"unBData-cpu-arguments\": 31220,
                    \"unBData-memory-arguments\": 32,
                    \"unConstrData-cpu-arguments\": 32696,
                    \"unConstrData-memory-arguments\": 32,
                    \"unIData-cpu-arguments\": 43357,
                    \"unIData-memory-arguments\": 32,
                    \"unListData-cpu-arguments\": 32247,
                    \"unListData-memory-arguments\": 32,
                    \"unMapData-cpu-arguments\": 38314,
                    \"unMapData-memory-arguments\": 32,
                    \"verifyEd25519Signature-cpu-arguments-intercept\": 57996947,
                    \"verifyEd25519Signature-cpu-arguments-slope\": 18975,
                    \"verifyEd25519Signature-memory-arguments\": 10
                },
                \"PlutusV3\": {
                    \"0\": 205665,
                    \"1\": 812,
                    \"10\": 4,
                    \"100\": 32,
                    \"101\": 65493,
                    \"102\": 32,
                    \"103\": 22558,
                    \"104\": 32,
                    \"105\": 16563,
                    \"106\": 32,
                    \"107\": 76511,
                    \"108\": 32,
                    \"109\": 196500,
                    \"11\": 1,
                    \"110\": 453240,
                    \"111\": 220,
                    \"112\": 0,
                    \"113\": 1,
                    \"114\": 1,
                    \"115\": 69522,
                    \"116\": 11687,
                    \"117\": 0,
                    \"118\": 1,
                    \"119\": 60091,
                    \"12\": 1000,
                    \"120\": 32,
                    \"121\": 196500,
                    \"122\": 453240,
                    \"123\": 220,
                    \"124\": 0,
                    \"125\": 1,
                    \"126\": 1,
                    \"127\": 196500,
                    \"128\": 453240,
                    \"129\": 220,
                    \"13\": 32,
                    \"130\": 0,
                    \"131\": 1,
                    \"132\": 1,
                    \"133\": 1159724,
                    \"134\": 392670,
                    \"135\": 0,
                    \"136\": 2,
                    \"137\": 806990,
                    \"138\": 30482,
                    \"139\": 4,
                    \"14\": 117366,
                    \"140\": 1927926,
                    \"141\": 82523,
                    \"142\": 4,
                    \"143\": 265318,
                    \"144\": 0,
                    \"145\": 4,
                    \"146\": 0,
                    \"147\": 85931,
                    \"148\": 32,
                    \"149\": 205665,
                    \"15\": 10475,
                    \"150\": 812,
                    \"151\": 1,
                    \"152\": 1,
                    \"153\": 41182,
                    \"154\": 32,
                    \"155\": 212342,
                    \"156\": 32,
                    \"157\": 31220,
                    \"158\": 32,
                    \"159\": 32696,
                    \"16\": 4,
                    \"160\": 32,
                    \"161\": 43357,
                    \"162\": 32,
                    \"163\": 32247,
                    \"164\": 32,
                    \"165\": 38314,
                    \"166\": 32,
                    \"167\": 35190005,
                    \"168\": 10,
                    \"169\": 57996947,
                    \"17\": 23000,
                    \"170\": 18975,
                    \"171\": 10,
                    \"172\": 39121781,
                    \"173\": 32260,
                    \"174\": 10,
                    \"175\": 23000,
                    \"176\": 100,
                    \"177\": 23000,
                    \"178\": 100,
                    \"179\": 832808,
                    \"18\": 100,
                    \"180\": 18,
                    \"181\": 3209094,
                    \"182\": 6,
                    \"183\": 331451,
                    \"184\": 1,
                    \"185\": 65990684,
                    \"186\": 23097,
                    \"187\": 18,
                    \"188\": 114242,
                    \"189\": 18,
                    \"19\": 23000,
                    \"190\": 94393407,
                    \"191\": 87060,
                    \"192\": 18,
                    \"193\": 16420089,
                    \"194\": 18,
                    \"195\": 2145798,
                    \"196\": 36,
                    \"197\": 3795345,
                    \"198\": 12,
                    \"199\": 889023,
                    \"2\": 1,
                    \"20\": 100,
                    \"200\": 1,
                    \"201\": 204237282,
                    \"202\": 23271,
                    \"203\": 36,
                    \"204\": 129165,
                    \"205\": 36,
                    \"206\": 189977790,
                    \"207\": 85902,
                    \"208\": 36,
                    \"209\": 33012864,
                    \"21\": 23000,
                    \"210\": 36,
                    \"211\": 388443360,
                    \"212\": 1,
                    \"213\": 401885761,
                    \"214\": 72,
                    \"215\": 2331379,
                    \"216\": 72,
                    \"217\": 1927926,
                    \"218\": 82523,
                    \"219\": 4,
                    \"22\": 100,
                    \"220\": 117366,
                    \"221\": 10475,
                    \"222\": 4,
                    \"23\": 23000,
                    \"24\": 100,
                    \"25\": 23000,
                    \"26\": 100,
                    \"27\": 23000,
                    \"28\": 100,
                    \"29\": 100,
                    \"3\": 1,
                    \"30\": 100,
                    \"31\": 23000,
                    \"32\": 100,
                    \"33\": 19537,
                    \"34\": 32,
                    \"35\": 175354,
                    \"36\": 32,
                    \"37\": 46417,
                    \"38\": 4,
                    \"39\": 221973,
                    \"4\": 1000,
                    \"40\": 511,
                    \"41\": 0,
                    \"42\": 1,
                    \"43\": 89141,
                    \"44\": 32,
                    \"45\": 497525,
                    \"46\": 14068,
                    \"47\": 4,
                    \"48\": 2,
                    \"49\": 196500,
                    \"5\": 571,
                    \"50\": 453240,
                    \"51\": 220,
                    \"52\": 0,
                    \"53\": 1,
                    \"54\": 1,
                    \"55\": 1000,
                    \"56\": 28662,
                    \"57\": 4,
                    \"58\": 2,
                    \"59\": 245000,
                    \"6\": 0,
                    \"60\": 216773,
                    \"61\": 62,
                    \"62\": 1,
                    \"63\": 1060367,
                    \"64\": 12586,
                    \"65\": 1,
                    \"66\": 208512,
                    \"67\": 421,
                    \"68\": 1,
                    \"69\": 187000,
                    \"7\": 1,
                    \"70\": 1000,
                    \"71\": 52998,
                    \"72\": 1,
                    \"73\": 80436,
                    \"74\": 32,
                    \"75\": 43249,
                    \"76\": 32,
                    \"77\": 1000,
                    \"78\": 32,
                    \"79\": 80556,
                    \"8\": 1000,
                    \"80\": 1,
                    \"81\": 57667,
                    \"82\": 4,
                    \"83\": 1000,
                    \"84\": 10,
                    \"85\": 197145,
                    \"86\": 156,
                    \"87\": 1,
                    \"88\": 197145,
                    \"89\": 156,
                    \"9\": 24177,
                    \"90\": 1,
                    \"91\": 204924,
                    \"92\": 473,
                    \"93\": 1,
                    \"94\": 208896,
                    \"95\": 511,
                    \"96\": 1,
                    \"97\": 52467,
                    \"98\": 32,
                    \"99\": 64832
                }        
            },
            \"price_mem\": 0.0577,
            \"price_step\": 0.0000721,
            \"max_tx_ex_mem\": \"10000000\",
            \"max_tx_ex_steps\": \"10000000000\",
            \"max_block_ex_mem\": \"50000000\",
            \"max_block_ex_steps\": \"40000000000\",
            \"max_val_size\": \"5000\",
            \"collateral_percent\": 150,
            \"max_collateral_inputs\": 3,
            \"coins_per_utxo_size\": \"34482\",
            \"coins_per_utxo_word\": \"34482\"
        }";
        // we can't unwrap(), print or even check is_ok() for Result<_, JsError>
        // outside of wasm environments so we just test make_tx_builder_cfg_impl directly instead.
        let params: serde_json::Value = serde_json::from_str(response_json).unwrap();
        let config_builder = make_tx_builder_cfg_impl(params).unwrap();
        let _config = config_builder.build().unwrap();
        // TransactionBuilderConfig / TransactionBuilderConfigBuilder have no pub fields
        // so we can't directly check them.
        // TODO: check this somehow
    }
}
