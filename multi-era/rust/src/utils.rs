use crate::MultiEraBlock;
use crate::{
    allegra::AllegraBlock, alonzo::AlonzoBlock, babbage::BabbageBlock, byron::block::ByronBlock,
    mary::MaryBlock, shelley::ShelleyBlock,
};
use cbor_event::de::Deserializer;
use cml_chain::block::Block;
use cml_core::error::{DeserializeError, DeserializeFailure};
use cml_core::serialization::{CBORReadLen, Deserialize};

impl MultiEraBlock {
    /**
     * Parses a block given the network block format with explicit era tag
     *
     * Some tools (e.g. Pallas/Oura) won't give you the block format from the binary spec directly,
     * but will instead have it wrapped in some network wrapper array containing the explicit era tag.
     * If your CBOR looks like `[uint, <actual block here>]`
     * (likely starting with `82` in hex e.g. `8201`, `8204`, `8207`, etc)
     * then you should use this function instead of the regular from_cbor_bytes().
     */
    pub fn from_explicit_network_cbor_bytes(bytes: &[u8]) -> Result<Self, DeserializeError> {
        let mut raw = Deserializer::from(std::io::Cursor::new(bytes));
        let len = raw.array()?;
        let mut read_len = CBORReadLen::from(len);
        read_len.read_elems(2)?;
        read_len.finish()?;
        let era = raw
            .unsigned_integer()
            .map_err(|e| DeserializeError::from(e).annotate("block_era_tag"))?;
        let block = match era {
            1 => ByronBlock::deserialize(&mut raw)
                .map(Self::Byron)
                .map_err(|e| e.annotate("Byron")),
            2 => ShelleyBlock::deserialize(&mut raw)
                .map(Self::Shelley)
                .map_err(|e| e.annotate("Shelley")),
            3 => AllegraBlock::deserialize(&mut raw)
                .map(Self::Allegra)
                .map_err(|e| e.annotate("Allegra")),
            4 => MaryBlock::deserialize(&mut raw)
                .map(Self::Mary)
                .map_err(|e| e.annotate("Mary")),
            5 => AlonzoBlock::deserialize(&mut raw)
                .map(Self::Alonzo)
                .map_err(|e| e.annotate("Alonzo")),
            6 => BabbageBlock::deserialize(&mut raw)
                .map(Self::Babbage)
                .map_err(|e| e.annotate("Babbage")),
            7 => Block::deserialize(&mut raw)
                .map(Self::Conway)
                .map_err(|e| e.annotate("Conway")),
            _ => Err(DeserializeFailure::NoVariantMatched.into()),
        }?;
        match len {
            cbor_event::Len::Len(_) => (),
            cbor_event::Len::Indefinite => match raw.special()? {
                cbor_event::Special::Break => (),
                _ => return Err(DeserializeFailure::EndingBreakMissing.into()),
            },
        }
        Ok(block)
    }
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn byron_network_block_parse() {
        let bytes = hex::decode("82018385015820f3e188a0adb6e8bc840286be2241bdf8d72efa8078d84534f4ac5e51189f537284830058200e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a85820afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b82035820d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c5820afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b58204e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e409884820119087158405eba3a05b57a84c877453667b2de00061b50dafafcdd83d7a0b7d0f0959eba7bef72eb9d18142f2deab055f197ac15a830e38aae8155e3cca07d212adb185110810c820282840058405eba3a05b57a84c877453667b2de00061b50dafafcdd83d7a0b7d0f0959eba7bef72eb9d18142f2deab055f197ac15a830e38aae8155e3cca07d212adb18511058409aae625d4d15bcb3733d420e064f1cd338f386e0af049fcd42b455a69d28ad366483d177ba2b801b4136e0d6662e5e9e0a24f2c80a0e78d4c235b4c08f201f4c5840939dcfe5555ee661b9db5d817a70d5c3fa9d1d97c2ae5849696d915606b530f7e9edda5d02a01e61524a766f9c356084616ba058a3de70ea51bf29cd187a5f0758402deb50bb6bb566cc688abe0548612b72e92e16a4b20542d2488eb479b31f6646457bdf8575e3bd9f168d278bb4cc7f91a27efaa7ec4e6e7ab24afafef84f7f0b8483010000826a63617264616e6f2d736c01a058204ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf849fff8203d90102809fff82809fff81a0").unwrap();
        let _block = MultiEraBlock::from_explicit_network_cbor_bytes(&bytes).unwrap();
    }

    #[test]
    fn shelley_network_block_parse() {
        let bytes = hex::decode("820284828f182e1a00015180582045899e8002b27df291e09188bfe3aeb5397ac03546a7d0ead93aa2500860f1af5820d1a8de6caa8fd9b175c59862ecdd5abcd0477b84b82a0e52faecc6b3c85100a4582051995f616f8a025f974b20330a53c0c81e8ea95973d73d15fff7bab57589311d8258406ef0be9293f5a307037b60b7252eae99bb045d58a521d5ba7c8d3aa129292a012a9391eefff8843f3558b35265ec432501b24688a2e0a21964fc71cf69c25dae58503d43c14357cd83b0f941f8c7e7a573fc361b8702bfee211bd7adb1a59f9576fe1bd11e3fa32b5a982e7b246e18058b099f147362c9c18acc43e1e4e8b5b7c660ea3ed9ac5b7a7ec0feb59ccfb64729048258407b4043c26958ea012568b14b0b95ae50d0bd589ae50d58ca5a7190375854084292f87b7f8878887269aaa59251d02032bf1bef5f5fe8fdafd1217164f0d77d885850f68678b7d56dc4178307ba00737cb3339c41f0bf77a894d2156c6cb4ce2047597b2b23dce04a7e1b9abd07a1b870bcf9b18aee0ce27d1fc3c4f2f73cf91f0ca3167e3f67dbe90838da2e8bf15234cb060358201033376be025cb705fd8dd02eda11cc73975a062b5d14ffd74d6ff69e69a2ff758202b9a5add912f3edc5c325d6250b9cc154de8f35e2924f5b1c707a4123808d064000058407fb060b885ffc7b55bb6e095ea6999eaa5608b6b4e92f5cc64bc34ba85000ebe42839432f15d86df07740374f69ce60f72feb16a0d47f5cf2c43158caf37ad0303005901c0f1f0c338a257b27351cf337c4c56961e67235b93cfa351f9d5f348911c7870cb2e084ff7c1f3d93719245fdbba539165d8eea9a510251e5cc3210b3bae3bb40034d42d5ecf181026f436173ad3036d5be2ba595f5facf920bcb48e8fd8b7b5fbf4f8fad5e652fd99be5d322fe920e702cc4afd218d76bd6800812155d8012c8fd57538a7b9d64f2defee3e32879e36db649a934b00784e6223023bdfffa59f4e54609d63a6f5ad04850c419a3556db8b291b90467fadfc67194a3069ef6ff4c0f7d6677145ceb51be68d6d0c20d0e92f80313c48dabf5ae8e3acd9fc43f450874848221f71d2f895c18790082d17467de32ff047a22cee1799db7e77e651a35c15b32d4f838133cc80d467308587ff5cea12be5b3b8b7d2d0d2eadf066b67cd965100555f96457d0d70988ffc2a7c212afa73338df3ece84ee7de2170aadec1dafc360580432193ab2a25c9c4555e57bc0d88cf50d7036378b4dabde79e5f858539a464e0a547660374da91d7d19acd753e219a8fee41a43bd4190db235dc0b1224bcfb9a760fb2b39063dccce88453043c0297cb6c93bca145a9ebbd6bc3a916ed9439343ac3510c47886d17a9187e833b9149e5ac2854c4d88a7c4b4ee68828080a0").unwrap();
        let _block = MultiEraBlock::from_explicit_network_cbor_bytes(&bytes).unwrap();
    }

    #[test]
    fn allegra_network_block_parse() {
        let bytes = hex::decode("820384828f1954971a0007e9c85820cacf5da6b8d81bbdf77b5ce4f5ea7f7b6714a29b1e81dbf541b01e92d8e1a3215820618b625df30de53895ff29e7a3770dca56c2ff066d4aa05a6971905deecef6db5820707a5e99ceec213eb56768da310566da8f4ff56cbdd90431ebd0ae17f6c8cc8b82584091b1c2d55cc491732a4cfa591a4e9bfd1aada7610d25e0fb9bb62176a0daf709485271c911c275b007005a0cf17e41e6639dff95d59319bf96270ec1515c161958506195ed4ddd4efd642b1810aa5ff92f91cb25082f07a61be35c7b82f06c9b8dc3a2fb7f9f1d40ff5779e63d02b09253716971018f8dfc0e4aa07bbeaa0e26f3fb235e0de00f60ba879c8a52744e8d470f825840ed8ac2d394a4a8022224b6f4b4b859bb748e6af00b8daa998c2aad2a9f42f8f4dc4f3eba29e323b426099805d02a7daf79ba262b51191b26bf07fce07f3effb75850e58bd3d0326bf69fb3ed652a556f16fb61e4835f6766d92965ddeea69a7000fcff6d98fa5f5cae9f5c3cf99b5606a76319180eaaff4af81aea358077e4363237579c9078dfce08a72a0b5ca90c5d140e1904a958206f970389c3de6fedb3d8d981a32e9bd3791f6e3230cdf02632394f0f7115a54b582005424ee48b0616cdbd5bc631ed25a628518575912c22c6dfea7e2778aac12bba000058404fa969b5356abab0a3c8a42007a3ab177d17aebdf4bedd93a541f545544a01dbb6e2696ef58ee8cf96c214717a4ebd35f2fa992d5815db01382f1bd516a38c0504005901c076acf26e9c06a576578d9977e791cf29017ebee3ec38d341c33c858b4e4fa0a9546e26033bab39b59947c4f25a0a2539dae2ed8a114675e72105df7449fab404088e270b2f1d3ff6c7b6c9f3b8150ec67d7ce24c6732cec4cec8de0b932b3e60507a6d639ab6ba44468039bc4c2f67b7952eaf125e9e11e8df871cfd2ba5316cbc4bd8e012158d56011100489b821ec29c3b9bdc28ed00911a529e46a83dd50faa7c35e2e59af061766144b53289d730787a1575153e9b3622733134443656dc9ba5091ce00397cd56ed509a875c177cc8b8b52b5e1bdba6aa414d966c5c6fd20b05a932284ca9902735bf350c0eda9af447beaad02703960b427a7368bb73b38fe90d56d3364c761b9a3ae0acb285054cf7ce0573d05464e1ea1b298ed8e876442244df9e3f19c4b36f8b4e09e0c63aeb48ac8f1c16af7897aa2a7846983f9d58ad4f84a5fa579f48028b66b9bc0617a2e9c67625cf98fc0b2df820393c63cf8b35c98874f8592752a1c8b34b09ed2d08d3ffc97c567152af96a1044485d66316c4ba224361e8ce16423fb537346f6cb4a9e1c2b3cf496dffe8e5a59cdd274d40d8f7d1a2ba6fc0aa3ce682e635272b9e57bac008586e14b67926c5bb24124781a40081825820a00696a0c2d70c381a265a845e43c55e1d00f96b27c06defc015dc92eb20624000018182581d609e5614893238cf85e284c61ec56d5efd9f9cdc4863ba7e1bf00c2c7d1b006983fdc40382dd021a00032bd50682a7581c637f2e950b0fd8f8e3e811c5fbeb19e411e7a2bf37272b84b29c1a0ba20cd81e8200010e820400581c8a4b77c4f534f8b8cc6f269e5ebb7ba77fa63a476e50e05e66d7051ca20cd81e8200010e820400581cb00470cd193d67aac47c373602fccd4195aad3002c169b5570de1126a20cd81e8200010e820400581cb260ffdb6eba541fcf18601923457307647dce807851b9d19da133aba20cd81e8200010e820400581cced1599fd821a39593e00592e5292bdc1437ae0f7af388ef5257344aa20cd81e8200010e820400581cdd2a7d71a05bed11db61555ba4c658cb1ce06c8024193d064f2a66aea20cd81e8200010e820400581cf3b9e74f7d0f24d2314ea5dfbca94b65b2059d1ff94d97436b82d5b4a20cd81e8200010e8204000581a100888258208b0960d234bda67d52432c5d1a26aca2bfb5b9a09f966d9592a7bf0c728a1ecd584011a439a7391e34bd1bd4829f669a630276deb8cbe59f2a5ccca5190d19963bef9477e6f61e8d47438323ce9424befec3357c88908473fd332a7633ab2882c006825820618b625df30de53895ff29e7a3770dca56c2ff066d4aa05a6971905deecef6db58405cde79e14b9c033276fb503aaf6ae84fd0142d63e01c0a81ec1fb0794874184c2e3ac0fca64274f01be1ff3b7a93d2e7df60b485deb71fa8549a8ad879b0cb0782582069a14b724409e0ceef671c76ec4f8bce7509b5919bb971b3855bf92ca56532225840ecd0ea504800f96b34cc42742b1bd45990fa0068161c9cce3fb0703568c7dfe2a9283c02e63d0593bab15fa34fe9b732ad1915019d0f2d05a0fd0a570aa14205825820d1a8de6caa8fd9b175c59862ecdd5abcd0477b84b82a0e52faecc6b3c85100a4584060a4389a2a3ef54f7060c638a4268b5c7e2042bde1d1c7dc9ae9d29ffbe8bb9170fc929f27e3b0b298d42f34035fd3c149c1ede0fce7ec2981c3c882123f180e8258209aae625d4d15bcb3733d420e064f1cd338f386e0af049fcd42b455a69d28ad3658407e986eef76c9dcfb2483ca3fbe299f224c51a58da94b85ba1fcba41b384691b4cde236ca0d72237a2a21fe373a0d68c69ec490f0628cb6523b0263ca3338fc0a825820942bb3aaab0f6442b906b65ba6ddbf7969caa662d90968926211a3d56532f11d584090b5745d1007bfc524ffc53dfa17e58483ff74e9d37275f0b9e9ca084e180e2c2799b7947dcdb34774836719ea897ee4bd3e38b7e52513084ef61dfd1ead3809825820d4dd69a41071bc2dc8e64a97f4bd6379524ce0c2b665728043a067e34d3e218a5840d9b5a70f1f14b084385930fa47ed66ed0c8237812825f6c3923bdc702ab1f219cc4583b8c0e5d291cfd3e0ae586f4e98d5e87d251304ed3afd1c088c129a190f8258208ef320c2df6654a6188c45e9c639c0a686bf5a865295587d399dfeb05fe74ab65840a59197afd5188eba40323d57246103eda1bb231a4df0879e6b1c3ce512978af0c6e33355f53bb9db0e6f85cc8d835355b6b30af9dde11a94c8c7ed2c635a7603a0").unwrap();
        let _block = MultiEraBlock::from_explicit_network_cbor_bytes(&bytes).unwrap();
    }

    // TODO: Mary test

    #[test]
    fn alonzo_network_block_parse() {
        let bytes = hex::decode("820585828f19fd871a001518165820af5fddc7d16a349e1a2af8ba89f4f5d3273955a13095b3709ef6e3db576a0b335820a9d974fd26bfaf385749113f260271430276bed6ef4dad6968535de6778471ce582009e142413e6a20c48dcf0bc1e1604d22ec6c1682802212c130bd8b0888fa925a825840e41904a15f3af92d9284737d2c30c2d3358bbac4bf759076b979fea06c1e39b1e81917fc5fc2b5630cbb89a381fb9141ec13757febde945eb5f9f3f7a73f7e7c5850c6e01289e3ec8b3e33c126eaa7bc0430eeaa54a632f1af449dd6d36edb308747333100f3fa9ca9953d0fe3b5b13ee032ce3023d65843d562b2fd3eccd8dbbd9f05247874e3e286312a530db6ab34bf0c8258400172d43b873ad7d44e9f675f9e07ee10ee17d660fecf53cb82c25a370206068cfc50f7d42b1b7dc6393c5d73dd3da1e005de6890d0675a9af4a53b50e54085335850bb00468778899c124a548ff45196cb903ca814abff3c34d40eb6d8f5e1d7891e9deaee26b67f05ee32942f2d7c2eba1f072c2a30601b4e4df944783e9d4f1c19f213ba0b25ae7b474f76cb8fa73f630604582029571d16f081709b3c48651860077bebf9340abb3fc7133443c54f1f5a5edcf15820ac442a832ec9084839a88cfe8ffc99bd22003f6a8cf6bd5b34bb309d0166e82d00005840d2c4345086faa2c56d503d773b49dddc239c599bddf41afabf0ee5410dd8ead37dd547bde8ce918580dd18721afa5f66fd954f5b35be8c24ad696089d222070806005901c02cffe4eb8a1f390974820aae493ac554edda85ce985505854bf382fa402a3ab24e73d28edb5ad6eda3e99b51de20f541ea1d7aecd2afe90608052f12aea0e90f5bab1593fcd77c4419476e27180477fd5f63a494d4914c1116b4278796ff1326a039ffdd789e2ab6943391a0ed144fcba0d521d48f26fd9666b7343731e7d0dbcaa78a1c25750c47bc5802b12ecb084b9558a0b9c6f04155e1fb7448a8a9d090989c20a173e318ebe1cfb6bfe8f701075ef10feb150cbfd9d21aac71a1e09e9d483c45aee59d66e04d4004729b0b2160d40b87e1e83dd394fbf7cd0fbe681865b240d053b80c17920f03ff09feae44700a1fe2b44cc5b6867e56c3fa1597ca952f875b148c493c0b2d358cb70f53ba036c688985b241929ccb10c39243b242d854bf46a36a1ed766c0b935f2bdb49004d9f383b8790d5abebaf5a42e0e1517a726b1efbb04dc051c66c3105437fd1992826ec790623843d026bc3c7827331ed1cea274c1de9b0b293c47e0c664e4d25414d23fc4fc9441c860d46e72e3739c6280d76e7e9752d362f98998eca3fdf032f55bad3125e528acca2fcc24a62cd30fe45889e058430eca4766499f404836687282a875a39922b46ef8795387574d528080a080").unwrap();
        let _block = MultiEraBlock::from_explicit_network_cbor_bytes(&bytes).unwrap();
    }

    #[test]
    fn babbage_network_block_parse() {
        let bytes = hex::decode("820685828a1a0002a1d21a00360d985820f93e682d5b91a94d8660e748aef229c19cb285bfb9830db48941d6a78183d81f58209691ed9d98a5b79d5bc46c4496a6dba7e103f668f525c8349b6b92676cb3eae45820ea49e4652c460b9ee6daafefc999ca667fbe5eb5d7a7aeabbdff6fe19c1a3c9f825840c448c14556645bfb1c2de174b4f375bd8e5c27a41f26661b17d05ab8d30e9f2527681555316ce65a7e4dfb3cf83f57144a95df44d1fa67293c31f0ab15c4f4b55850c15e1be17e969159dd7ea5df78af4154767e6c13e4f41cf67d9bc305f6f4d0e1ec56df71df7e00ab51d9f7de9bdefc88e60a155f4af7225007146c38cff4d5ca7a8067214baba73aa5a2f726da72360904582029571d16f081709b3c48651860077bebf9340abb3fc7133443c54f1f5a5edcf18458200481896957dda8d02d825448eb22aad5e106114d924f49923b2fd68e6b3254d3000058403b0db934233f93c43de54a63f8be99bd21da431dcea996a01213ada37e66c6a3930a95399ce083875ba95ffa58cb8ca9b83c92f7d440adb968d8569d74fe90018207005901c0c8e3bb3da1d72fa8a736a6a66bec894083a7f74b388181c54b8faaaf7ccd020acd7a7fbde4a2505f6fbfa907a8bca491219713841720e122a94a057ad065850e88894f7b7985335bd2e3c6bbed5a3fa7fd526a8afafd78fd04dfaef371ad55d0d3d0f1707db5e6773f3ccb896d9f81b1428c3dbcf693c54580f91bb93364272349c08980f71e74e74f8d7863a29cee3fbd821642c14285d8198c68fdbc0a193bf63d97c7a5481ce7da17c97f43a7b98d0cad8c3af26ae4f9ac695fab06ca34685ec57339673d084e0417f844747025f4f5b42cbd883159a3d52dab9dafdfb37b0136757b67ec4e1a6768c43cee5937b81e03224aa6909a9a3254cdf33887914d67723f9a5a4505ac41b658cec10d6c2949e3d3c58bc7a27b64eb8407cbdad7806db704e7ee172405ddaa634119f878541d2f19674dcd0aebf4e6e1091635ce177489742c28d61a4698edaea3364b92b03a73838ca24ce83913727154dae3c2ee4a331997dacd155753f014bc98cfa25b8d84c808654852b5e1e74e251651e30063a6451a676795aa421ea59daa711a7ff0d4140de86bc89969f717d461690c341da4cd440818205961ed9cc9970f52b10ac1b1c3ed3e0d0170582daec84ef2068080a080").unwrap();
        let _block = MultiEraBlock::from_explicit_network_cbor_bytes(&bytes).unwrap();
    }

    // TODO: Conway test
}
