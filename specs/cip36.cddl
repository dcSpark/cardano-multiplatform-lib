registration_cbor = {
  61284: key_registration, ; @name key_registration
  61285: registration_witness, ; @name registration_witness
}

public_key = _CDDL_CODEGEN_RAW_BYTES_TYPE_

voting_pub_key = public_key
payment_address = _CDDL_CODEGEN_EXTERN_TYPE_
nonce = uint
weight = uint .size 4
voting_purpose = uint
legacy_key_registration = voting_pub_key
delegation = [voting_pub_key, weight]

; May support other stake credentials in the future.
; Such additional credentials should be tagged at the CDDL/CBOR level
; so that parsing is not ambiguous and future proof.
; However, to avoid breaking changes, the simple key credential is
; left untagged.
stake_credential = staking_pub_key
stake_witness = ed25519_signature
; A stake key credential, not tagged for backward compatibility
staking_pub_key = public_key
; Witness for a stake key credential, not tagged for backward compatibility
ed25519_signature = _CDDL_CODEGEN_RAW_BYTES_TYPE_

delegation_distribution =
    [+delegation] ; @name weighted
  / legacy_key_registration ; @name legacy 

key_registration = {
  1 : delegation_distribution, ; @name delegation
  2 : stake_credential, ; @name stake_credential
  3 : payment_address, ; @name payment_address
  4 : nonce, ; @name nonce
  ? 5 : voting_purpose .default 0, ; @name voting_purpose
}


registration_witness = {
  1 : stake_witness, ; @name stake_witness
}


deregistration_cbor = {
  61286: key_deregistration, ; @name key_deregistration
  61285: deregistration_witness, ; @name deregistration_witness
}

key_deregistration = {
  1 : stake_credential, ; @name stake_credential
  2 : nonce, ; @name nonce
  ? 3 : voting_purpose .default 0, ; @name voting_purpose
}

deregistration_witness = {
  1 : stake_witness, ; @name stake_witness
}
