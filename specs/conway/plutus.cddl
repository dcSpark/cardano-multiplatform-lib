; bounded_bytes = bytes .size (0..64)
;  ; the real bounded_bytes does not have this limit. it instead has a different
;  ; limit which cannot be expressed in CDDL.
;  ; The limit is as follows:
;  ;  - bytes with a definite-length encoding are limited to size 0..64
;  ;  - for bytes with an indefinite-length CBOR encoding, each chunk is
;  ;    limited to size 0..64
;  ;  ( reminder: in CBOR, the indefinite-length encoding of bytestrings
;  ;    consists of a token #2.31 followed by a sequence of definite-length
;  ;    encoded bytestrings and a stop code )
bounded_bytes = bytes ; @no_alias

plutus_v1_script = bytes ; @newtype
plutus_v2_script = bytes ; @newtype
plutus_v3_script = bytes ; @newtype

plutus_data =
    constr_plutus_data
  / { * plutus_data => plutus_data } ; @name map
  / [ * plutus_data ] ; @name list
  / big_int ; @name integer
  / bounded_bytes ; @name bytes

big_int = _CDDL_CODEGEN_EXTERN_TYPE_

; original definition not used to avoid hundreds of variants:
; constr<a> =
;    #6.121([* a])
;  / #6.122([* a])
;  / #6.123([* a])
;  / #6.124([* a])
;  / #6.125([* a])
;  / #6.126([* a])
;  / #6.127([* a])
;  ; similarly for tag range: 6.1280 .. 6.1400 inclusive
;  / #6.102([alternative: uint, fields: [* a]])
constr_plutus_data = _CDDL_CODEGEN_EXTERN_TYPE_

redeemer = [ tag: redeemer_tag, index: uint, data: plutus_data, ex_units: ex_units ]
redeemer_tag =
    0 ; @name Spend
  / 1 ; @name Mint
  / 2 ; @name Cert
  / 3 ; @name Reward
ex_units = [mem: uint, steps: uint]

ex_unit_prices =
  [ mem_price: sub_coin, step_price: sub_coin ]

language = 0 ; @name plutus_v1
         / 1 ; @name plutus_v2
         / 2 ; @name plutus_v3

cost_models = {
  ? 0 : [ 166*166 int ], ; @name plutus_v1
  ? 1 : [ 175*175 int ], ; @name plutus_v2
  ? 2 : [ 179*179 int ], ; @name plutus_v3
}
